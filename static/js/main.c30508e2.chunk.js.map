{"version":3,"sources":["image1.jpg","image2.jpg","image3.jpg","Card.js","Carousel.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","caption","src","alt","currNum","totalNum","Carousel","useState","cardIdx","setCardIdx","card","cardData","total","length","hideLeft","hideRight","title","onClick","defaultProps","image1","image2","image3","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qPAAe,G,MAAA,IAA0B,oCCA1B,MAA0B,mCCA1B,MAA0B,mC,eCe1BA,MAZf,SAAcC,GACZ,OACE,sBAAKC,UAAU,OAAf,UACE,oBAAIA,UAAU,aAAd,SAA4BD,EAAME,UAClC,qBAAKD,UAAU,aAAaE,IAAKH,EAAMG,IAAKC,IAAKJ,EAAME,UACvD,wBAAOD,UAAU,aAAjB,mBACSD,EAAMK,QADf,OAC4BL,EAAMM,SADlC,WCDN,SAASC,EAASP,GAChB,MAA8BQ,mBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACMC,EAAOX,EAAMY,SAASH,GACtBI,EAAQb,EAAMY,SAASE,OAGvBC,EAAuB,IAAZN,EACXO,EAAYP,IAAYT,EAAMY,SAASE,OAAS,EAEtD,OACE,sBAAKb,UAAU,WAAf,UACE,6BAAKD,EAAMiB,QACX,sBAAKhB,UAAU,gBAAf,UACE,mBACEA,UAAWc,EAAW,OAAS,mCAC/BG,QAVW,kBAAMR,EAAWD,EAAU,IAWtC,cAAY,eAEd,cAAC,EAAD,CACEP,QAASS,EAAKT,QACdC,IAAKQ,EAAKR,IACVE,QAASI,EAAU,EACnBH,SAAUO,IAEZ,mBACEZ,UAAWe,EAAY,OAAS,oCAChCE,QAtBU,kBAAMR,EAAWD,EAAU,IAuBrC,cAAY,sBAOtBF,EAASY,aAAe,CACtBP,SAAU,CACR,CACET,IAAKiB,EACLlB,QAAS,4CAEX,CACEC,IAAKkB,EACLnB,QAAS,qCAEX,CACEC,IAAKmB,EACLpB,QAAS,mCAGbe,MAAO,iCAGMV,QC/CAgB,MARf,WACE,OACE,qBAAKtB,UAAU,MAAf,SACE,cAAC,EAAD,OCKcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c30508e2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/image1.08e1519e.jpg\";","export default __webpack_public_path__ + \"static/media/image2.e659483e.jpg\";","export default __webpack_public_path__ + \"static/media/image3.151fb1d6.jpg\";","import React from \"react\";\nimport \"./Card.css\";\n\nfunction Card(props) {\n  return (\n    <div className=\"Card\">\n      <h4 className=\"Card-title\">{props.caption}</h4>\n      <img className=\"Card-image\" src={props.src} alt={props.caption} />\n      <small className=\"Card-small\">\n        Image {props.currNum} of {props.totalNum}.\n      </small>\n    </div>\n  );\n}\n\nexport default Card;\n","import React, { useState } from \"react\";\nimport \"./Carousel.css\";\nimport image1 from \"./image1.jpg\";\nimport image2 from \"./image2.jpg\";\nimport image3 from \"./image3.jpg\";\nimport Card from \"./Card\";\n\nfunction Carousel(props) {\n  const [cardIdx, setCardIdx] = useState(0);\n  const card = props.cardData[cardIdx];\n  const total = props.cardData.length;\n  const goForward = () => setCardIdx(cardIdx + 1);\n  const goBackward = () => setCardIdx(cardIdx - 1);\n  const hideLeft = cardIdx === 0;\n  const hideRight = cardIdx === props.cardData.length - 1;\n\n  return (\n    <div className=\"Carousel\">\n      <h1>{props.title}</h1>\n      <div className=\"Carousel-main\">\n        <i\n          className={hideLeft ? \"null\" : \"fas fa-chevron-circle-left fa-2x\"}\n          onClick={goBackward}\n          data-testid=\"left-arrow\"\n        />\n        <Card\n          caption={card.caption}\n          src={card.src}\n          currNum={cardIdx + 1}\n          totalNum={total}\n        />\n        <i\n          className={hideRight ? \"null\" : \"fas fa-chevron-circle-right fa-2x\"}\n          onClick={goForward}\n          data-testid=\"right-arrow\"\n        />\n      </div>\n    </div>\n  );\n}\n\nCarousel.defaultProps = {\n  cardData: [\n    {\n      src: image1,\n      caption: \"Photo by Richard Pasquarella on Unsplash\",\n    },\n    {\n      src: image2,\n      caption: \"Photo by Pratik Patel on Unsplash\",\n    },\n    {\n      src: image3,\n      caption: \"Photo by Josh Post on Unsplash\",\n    },\n  ],\n  title: \"Shells from far away beaches.\",\n};\n\nexport default Carousel;\n","import React from \"react\";\nimport \"./App.css\";\nimport Carousel from \"./Carousel\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Carousel />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"@fortawesome/fontawesome-free/css/all.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}